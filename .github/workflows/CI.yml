# This workflow runs the continuous integration and regression tests for RMG-Py and RMG-database

# TODO cache-ing (lines 38-40 of .travis.yml)
# TODO figure out why the testing was grouped that way, see if there are ways to parallelize

name: CI

# Controls when the workflow will run
on:
  # Triggers the workflow on push for branches that start with the following pattern
  push:
    branches: ['rmgpy-*', 'rmgdb-*', 'rmgpydb-*', 'rmgdbpy-*']

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

jobs:
  build_and_test:
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash -l {0}
    env:
      GH_TOKEN: ${{ secrets.RMG_DEV_TOKEN }}
      MOPACKEY: ${{ secrets.MOPACKEY }}
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
      #- uses: conda-incubator/setup-miniconda@v2
      #  with:
      #    auto-update-conda: true
      #- uses: julia-actions/setup-julia@latest
      #  with:
      #    version: 1.5
      - name: before_install
        run: |
          chmod +x *.sh
          ./before_install.sh
          ./color_define.sh
      - name: install
        run: |
          ./install.sh
          ./version_summary.sh
          chmod +x run.sh
      - name: build
        run: ./compile.sh
      - name: test  # TODO make this part run in parallel
        run: |
          ./run.sh rmg/aromatics no
          echo "aromatics status: ${?}"
          ./run.sh rmg/nitrogen no
          echo "nitrogen status: ${?}"
          ./run.sh rmg/sulfur no
          echo "sulfur status: ${?}"
          ./run.sh rmg/oxidation no
          echo "oxidation status: ${?}"
          ./run.sh rmg/liquid_oxidation no
          echo "liquid oxidation status: ${?}"
          ./run.sh rmg/superminimal no
          echo "superminimal status: ${?}"
          ./run.sh examples/eg1 no
          echo "eg1 status: ${?}"
      - name: finish  # TODO check that this works as expected for both success and failure
        run: |
          if [ ${{ job.status }} == 'success' ]; then
            ./after_success.sh
          else
            ./after_failure.sh
          fi
